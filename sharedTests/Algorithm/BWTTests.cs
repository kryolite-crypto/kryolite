using Xunit;
using Kryolite.Shared;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Kryolite.Shared.Tests
{
    public class BWTTests
    {
        [Theory]
        [InlineData(55, new byte[] { 160, 252, 243, 115, 27, 108, 254, 102, 187, 131, 86, 24, 165, 135, 145, 244, 85, 71, 167, 118, 145, 17, 161, 144, 30, 173, 253, 228, 76, 68, 105, 154, 236, 72, 96, 116, 79, 122, 145, 207, 45, 125, 208, 118, 214, 14, 185, 23, 198, 61, 60, 211, 183, 91, 23, 192, 209, 221, 106, 207, 96, 143, 245, 207, 58, 20, 43, 150, 23, 246, 204, 141, 198, 189, 189, 10, 74, 138, 149, 58, 49, 195, 84, 70, 85, 127, 59, 16, 90, 17, 114, 121, 188, 25, 154, 132, 11, 203, 101, 122, 16, 84, 85, 236, 203, 122, 16, 201, 74, 86, 104, 26, 1, 217, 103, 249, 176 })]
        [InlineData(87, new byte[] { 171, 180, 111, 252, 104, 162, 192, 164, 122, 1, 242, 41, 25, 75, 255, 7, 114, 203, 41, 135, 255, 131, 140, 240, 92, 105, 223, 247, 220, 248, 60, 90, 70, 190, 57, 19, 107, 81, 118, 236, 169, 226, 251, 5, 9 })]
        [InlineData(12, new byte[] { 2, 95, 86, 221, 59, 68, 1, 44, 162, 86, 176, 127, 179, 105, 218, 117, 6, 113, 136, 77, 168, 123, 51, 144, 145, 105, 62, 120, 144, 156, 122, 154, 2, 158, 17, 108, 193, 136, 127, 72, 53, 244, 60, 57, 110, 118, 175, 32, 54, 1, 243, 14, 107, 153, 231, 239, 32, 169, 134, 211, 242, 10, 252, 39, 77, 153, 195, 52, 97, 28, 172, 154, 159, 61, 107, 240, 128, 42, 131, 145, 217, 86, 188, 18, 116, 122, 2, 72, 67, 151, 167, 254, 179, 235, 36, 30, 222, 36, 183, 154, 105, 54, 184, 5, 149, 164, 156, 234, 74, 82, 226, 154, 198, 6, 34, 21, 230, 43, 39, 103, 111, 125, 25, 191, 201, 231, 66, 106, 21, 84, 133, 226, 57, 239, 98, 2, 238, 68, 73, 139, 82, 99, 107, 156, 247, 235, 237, 101, 19, 195, 208, 241, 162, 201, 64, 137, 222, 11, 194, 101, 255, 178, 40, 12, 75, 76, 60, 193, 6, 228, 39, 93, 252, 66, 191, 248, 208, 66, 251, 80, 143, 232, 101, 159, 157, 52, 112, 109, 135, 144, 51, 0, 86, 224, 144, 152, 209, 74, 28, 188, 22, 130, 79, 116, 249, 87, 151, 40, 187, 34, 10, 252, 39, 131, 94, 181, 12, 254, 13, 104, 247, 68, 116, 237, 207, 147, 245, 136, 133, 142, 18, 212, 156, 248, 153, 148, 70, 41, 238, 251, 136, 165, 29, 67, 48, 135, 179, 112, 106, 125, 13, 58, 219, 117 })]
        [InlineData(98, new byte[] { 229, 164, 63, 58, 47, 226, 50, 122, 212, 122, 7, 51, 255, 82, 85, 212, 8, 238, 136, 242, 219, 125, 182, 169, 173, 171, 87, 50, 148, 191, 210, 155, 101, 218, 210, 36, 117, 57, 107, 37, 154, 161, 43, 181, 152, 167, 94, 58, 199, 245, 126, 36, 154, 103, 91, 1, 189, 112, 220, 213, 166, 219, 184, 146, 17, 6, 229, 235, 29, 136, 165, 70, 140, 227, 90, 183, 225, 31, 50, 10, 40, 146, 192, 213, 111, 236, 131, 86, 41, 168, 143, 32, 87, 45, 15, 177, 111, 173, 72, 151, 202, 89, 246, 143, 63, 167, 219, 28, 83, 59, 83, 213, 51, 247, 209, 71, 179, 53, 238, 123, 213, 52, 40, 53, 216, 25, 38, 95, 60, 164, 119, 204, 122, 101, 246, 124, 92, 228, 203, 218, 88, 97, 169, 45, 48, 188, 183, 127, 5, 122, 65, 141, 201, 174, 250, 42, 47, 27, 207, 19, 251, 80, 33, 109, 216, 160, 21, 111, 115, 13, 159, 94, 217, 90, 127, 113, 152, 174, 197, 122, 224, 117, 28, 210, 169, 28, 255, 79, 110, 183, 174, 229, 197, 76, 109, 124, 0, 100, 97, 233, 184, 134, 242, 155, 96, 84, 36, 227, 7, 254, 81, 214, 116, 79, 80, 99, 218, 152, 67, 21, 129, 128, 77, 114, 208, 234, 159, 247, 161, 198, 44, 174, 60, 147, 101, 98 })]
        [InlineData(34, new byte[] { 213, 145, 94, 234, 116, 198, 43, 161, 209, 225, 243, 61, 83, 142, 75, 136, 130, 5, 59, 151, 192, 141, 196, 110, 166, 186, 252, 27, 122, 156, 8, 96, 246, 197, 250, 16, 115, 208, 194, 1, 177, 109, 244, 86, 198, 223, 197, 252, 24, 50, 3, 229, 208, 90, 150, 38, 144, 14, 135, 218, 38, 148, 5, 6, 83, 164, 252, 51, 18, 181, 7, 213, 159, 105, 164, 200, 186, 102, 121, 231, 10, 27, 95, 220, 26, 252, 58, 162, 85, 251, 59, 78, 226, 2, 145, 208, 224, 67, 246, 245, 236, 92, 84, 57, 229, 159, 210, 71, 221, 57, 214, 111, 118, 10, 163, 52, 199, 146, 73, 156, 42, 101, 151, 126, 188 })]
        public void EncodeDecodeTest(int seed, byte[] expected)
        {
            var rand = new Random(seed);

            var len = rand.Next(256);
            var input = new byte[len];
            var output = new byte[len];

            rand.NextBytes(input);

            BWT.Encode(input, output.AsSpan(), out var index);
            var decoded = BWT.Decode(output, index);

            Assert.Equal(input, decoded);
            Assert.Equal(output, expected);
        }
    }
}