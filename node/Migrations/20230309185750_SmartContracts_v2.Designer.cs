// <auto-generated />
using System;
using Kryolite.Node;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace node.Migrations
{
    [DbContext(typeof(BlockchainContext))]
    [Migration("20230309185750_SmartContracts_v2")]
    partial class SmartContracts_v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("Kryolite.Node.ChainState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("pk_chain_state");

                    b.ToTable("ChainState", (string)null);
                });

            modelBuilder.Entity("Kryolite.Node.PohjolaChain", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CurrentDifficulty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentReward")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("TotalWork")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Id")
                        .HasName("pk_pow");

                    b.ToTable("PohjolaChain");
                });

            modelBuilder.Entity("Kryolite.Node.TuonelaChain", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SampoCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("pk_pos");

                    b.ToTable("TuonelaChain");
                });

            modelBuilder.Entity("Kryolite.Shared.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Balance")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Code")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<long?>("EntryPoint")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Manifest")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("pk_contracts");

                    b.HasIndex("Address")
                        .HasDatabaseName("ix_contract_address");

                    b.ToTable("Contracts", (string)null);
                });

            modelBuilder.Entity("Kryolite.Shared.ContractSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("TEXT");

                    b.Property<long>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Snapshot")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Id")
                        .HasName("pk_contract_snapshots");

                    b.HasIndex("ContractId");

                    b.HasIndex("Height")
                        .HasDatabaseName("ix_snapshot_height");

                    b.ToTable("ContractSnapshots", (string)null);
                });

            modelBuilder.Entity("Kryolite.Shared.Effect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<long>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("pk_effect");

                    b.HasIndex("TransactionId");

                    b.ToTable("Effects", (string)null);
                });

            modelBuilder.Entity("Kryolite.Shared.LedgerWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Balance")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Pending")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("pk_ledger_wallet");

                    b.HasIndex("Address")
                        .HasDatabaseName("ix_ledger_wallet_address");

                    b.ToTable("LedgerWallets", (string)null);
                });

            modelBuilder.Entity("Kryolite.Shared.PosBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParentHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SignedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Timestamp")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("pk_pos");

                    b.HasIndex("Height")
                        .HasDatabaseName("ix_pos_height");

                    b.ToTable("PosBlocks", (string)null);
                });

            modelBuilder.Entity("Kryolite.Shared.PowBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<uint>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nonce")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PosBlockId")
                        .HasColumnType("TEXT");

                    b.Property<long>("Timestamp")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("pk_pow");

                    b.HasIndex("Height")
                        .HasDatabaseName("ix_pow_height");

                    b.HasIndex("PosBlockId")
                        .IsUnique();

                    b.ToTable("PowBlocks", (string)null);
                });

            modelBuilder.Entity("Kryolite.Shared.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .HasColumnType("BLOB");

                    b.Property<string>("From")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("MaxFee")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Nonce")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("PosBlockId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PowBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("Signature")
                        .HasColumnType("TEXT");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("TransactionType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("pk_tx");

                    b.HasIndex("From")
                        .HasDatabaseName("ix_tx_from");

                    b.HasIndex("Hash")
                        .HasDatabaseName("ix_tx_hash");

                    b.HasIndex("PosBlockId");

                    b.HasIndex("PowBlockId");

                    b.HasIndex("To")
                        .HasDatabaseName("ix_tx_to");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Kryolite.Shared.Vote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("PosBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("pk_vote");

                    b.HasIndex("Height")
                        .HasDatabaseName("ix_vote_height");

                    b.HasIndex("PosBlockId");

                    b.ToTable("Votes", (string)null);
                });

            modelBuilder.Entity("Kryolite.Node.PohjolaChain", b =>
                {
                    b.HasOne("Kryolite.Node.ChainState", null)
                        .WithOne("POW")
                        .HasForeignKey("Kryolite.Node.PohjolaChain", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cs_pow");
                });

            modelBuilder.Entity("Kryolite.Node.TuonelaChain", b =>
                {
                    b.HasOne("Kryolite.Node.ChainState", null)
                        .WithOne("POS")
                        .HasForeignKey("Kryolite.Node.TuonelaChain", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cs_pos");
                });

            modelBuilder.Entity("Kryolite.Shared.ContractSnapshot", b =>
                {
                    b.HasOne("Kryolite.Shared.Contract", null)
                        .WithMany("Snapshots")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_contract_snapshot");
                });

            modelBuilder.Entity("Kryolite.Shared.Effect", b =>
                {
                    b.HasOne("Kryolite.Shared.Transaction", null)
                        .WithMany("Effects")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tx_effect");
                });

            modelBuilder.Entity("Kryolite.Shared.PowBlock", b =>
                {
                    b.HasOne("Kryolite.Shared.PosBlock", null)
                        .WithOne("Pow")
                        .HasForeignKey("Kryolite.Shared.PowBlock", "PosBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pos_pow");
                });

            modelBuilder.Entity("Kryolite.Shared.Transaction", b =>
                {
                    b.HasOne("Kryolite.Shared.PosBlock", null)
                        .WithMany("Transactions")
                        .HasForeignKey("PosBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_pos_tx");

                    b.HasOne("Kryolite.Shared.PowBlock", null)
                        .WithMany("Transactions")
                        .HasForeignKey("PowBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_pow_tx");
                });

            modelBuilder.Entity("Kryolite.Shared.Vote", b =>
                {
                    b.HasOne("Kryolite.Shared.PosBlock", null)
                        .WithMany("Votes")
                        .HasForeignKey("PosBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_pos_vote");
                });

            modelBuilder.Entity("Kryolite.Node.ChainState", b =>
                {
                    b.Navigation("POS")
                        .IsRequired();

                    b.Navigation("POW")
                        .IsRequired();
                });

            modelBuilder.Entity("Kryolite.Shared.Contract", b =>
                {
                    b.Navigation("Snapshots");
                });

            modelBuilder.Entity("Kryolite.Shared.PosBlock", b =>
                {
                    b.Navigation("Pow");

                    b.Navigation("Transactions");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Kryolite.Shared.PowBlock", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Kryolite.Shared.Transaction", b =>
                {
                    b.Navigation("Effects");
                });
#pragma warning restore 612, 618
        }
    }
}
