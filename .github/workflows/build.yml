name: build

on:
  push:

jobs:
  builder:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
      - run: docker pull ghcr.io/${GITHUB_REPOSITORY}/builder:latest || true
      - run: docker build -f Dockerfile.builder --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from=ghcr.io/${GITHUB_REPOSITORY}/builder:latest -t ghcr.io/${GITHUB_REPOSITORY}/builder:latest .
        env:
          DOCKER_BUILDKIT: 1
      - run: docker push ghcr.io/${GITHUB_REPOSITORY}/builder:latest
  delete-artifacts:
    runs-on: ubuntu-22.04
    steps:
      - name: Delete artifacts from previous runs
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          script: |
            const runsResponse = await github.request("GET /repos/${{ github.repository }}/actions/runs")
            for (workflow_run of runsResponse.data.workflow_runs) {
              if (workflow_run.name == "${{ github.workflow }}" && workflow_run.status !== "in_progress") {
                console.log(`Deleting artifacts from workflow run ${workflow_run.id}`)
                const response = await github.request(`GET /repos/$/actions/runs/${workflow_run.id}/artifacts`)
                for (artifact of response.data.artifacts) {
                  console.log(`Deleting artifact with id ${artifact.id}`)
                  const deleteResponse = await github.request(`DELETE /repos/$/actions/artifacts/${artifact.id}`)
                }
              }
            }
  build:
    needs: builder
    strategy:
      matrix:
        component: [daemon, holvi-wallet, louhi-miner]
        runtime: [linux-x64, linux-arm64, mac-x64, mac-arm64, win-x64]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
      - run: docker pull "ghcr.io/${GITHUB_REPOSITORY}/builder:latest"
      - run: docker tag "ghcr.io/${GITHUB_REPOSITORY}/builder:latest" builder
      - run: mkdir dist
      - run: docker run -v "$(pwd)/dist:/dist" builder "${{ matrix.component }}" "${{ matrix.runtime }}" /dist
      - run: ls -lah dist
      - uses: actions/upload-artifact@v3
        with:
          path: dist
  release:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v3
      - run: ls -lah
      - run: tree
